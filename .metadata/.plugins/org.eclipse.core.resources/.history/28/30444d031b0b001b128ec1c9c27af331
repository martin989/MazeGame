import java.util.Stack;

/**
 * 
 */

/**
 * @author Martin Kucharek
 *
 */
public class Main {

	
	private static MazeSpace[][] mazeSpaces = new MazeSpace[0][0];
	private static Stack<MazeSpace> trackingStack = new Stack<MazeSpace>(); 
	
	/**
	 * Creates the maze
	 * (0 for blocked, 1 for able to walk through, 2 for start, and 3 for end)
	 * 
	 * Returns the maze 2d int array
	 */
		
	public static MazeSpace[][] CreateMaze() {
		int[][] maze = new int[][] {
				{0, 2, 1, 0}, 
				{0, 0, 1, 1},
				{1, 1, 1, 0}, 
				{1, 0, 3, 0}
			   };
	    mazeSpaces = new MazeSpace[maze.length][maze[0].length];
		for (int i = 0; i < maze.length; i++) {
			for (int j = 0; j < maze[0].length; j++) {
				mazeSpaces[i][j] = new MazeSpace(maze[i][j],i,j);
			}
		}   		
		return mazeSpaces;
	}
	
	/**
	 * Finds start and end point
	 * 
	 * Returns xy in an array
	 */
	public static int[][] FindStartEndPoint(MazeSpace[][] maze){
		int[][] xy = {
				{0,0},
				{0,0}
				};
		for (int i = 0; i < maze.length; i++) {
			for (int j = 0; j < maze[0].length; j++) {
				if(maze[i][j].getStartSpace() == true) {
					 xy[0][1]= i;
					 xy[0][0]= j;
				}else if(maze[i][j].getEndSpace() == true) {
					 xy[1][1]= i;
					 xy[1][0]= j;
				}
			}
		}                      	
		return xy;
	}
	
	
	/**
	 * Returns 0 for left, 1 for right, 2 for up, and 3 for down
	 */
	public static int GetDirection(MazeSpace[][] maze) {
		int direction = 0;
		
		return direction;	
	}
	
	
	/**
	 * Solves the maze
	 * 
	 *  Returns the solved results (true for solved, false for not solved)
	 * 
	 */
	public static Boolean SolveMaze(MazeSpace[][] maze) {
		int[][] startEndPoint = FindStartEndPoint(maze);
		int incrX = startEndPoint[0][0];
		int incrY = startEndPoint[0][1];
		int prevX = -1;
		int prevY = -1;
		int startX = startEndPoint[0][0];
		int startY = startEndPoint[0][1];
		int endX = startEndPoint[1][0];
		int endY = startEndPoint[1][1];
		maze[incrY][incrX].setAlreadyTried(true);
		
		//Move around board to find end
		while(true) {
			//Check to see if solved already
			if(incrX == endX && incrY == endY) {
				return true;
			}
			if(prevX == incrX && prevY == incrY) {
				if(trackingStack.isEmpty() != true) {
					MazeSpace backTrack =  trackingStack.pop();
					incrX = backTrack.getX();
					incrY = backTrack.getY();
				}
				return false;
			}else {
				prevX = incrX;
				prevY = incrY;
			}
			//Look Up
			if(incrY != 0) {
				if(maze[incrY - 1][incrX].getWallSpace() != true && maze[incrY - 1][incrX].getAlreadyTried() != true) {
					incrY -= 1;
					maze[incrY][incrX].setAlreadyTried(true);
					trackingStack.push(maze[incrY][incrX]);
				}
			}
			//Look Down
			if(incrY != (maze.length-1)) {
				if(maze[incrY + 1][incrX].getWallSpace() != true && maze[incrY + 1][incrX].getAlreadyTried() != true) {
					incrY += 1;
					maze[incrY][incrX].setAlreadyTried(true);
					trackingStack.push(maze[incrY][incrX]);
				}
			}
			//Look Left
			if(incrX != 0) {
				if(maze[incrY][incrX - 1].getWallSpace() != true && maze[incrY][incrX - 1].getAlreadyTried() != true) {
					incrX -= 1;
					maze[incrY][incrX].setAlreadyTried(true);
					trackingStack.push(maze[incrY][incrX]);
				}
			}
			//Look Right
			if(incrX != (maze[0].length-1)) {
				if(maze[incrY][incrX + 1].getWallSpace() != true && maze[incrY][incrX + 1].getAlreadyTried() != true) {
					incrX += 1;
					maze[incrY][incrX].setAlreadyTried(true);
					trackingStack.push(maze[incrY][incrX]);
				}
			}	
			
			//Check to see if nothing left to move
			if(incrX == startX && incrY == startY && trackingStack.isEmpty()) {
				return false;
			}
		}	
	}
	
	
	/**
	 * 
	 */
	public Main() {
		//Create and solve the maze
		SolveMaze(CreateMaze());		
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Boolean results = SolveMaze(CreateMaze());
		if(results == true) {
			System.out.print("Found Path");
		}else {
			System.out.print("No Path");
		}
	}

}
