/**
 * 
 */

/**
 * @author Martin Kucharek
 *
 */
public class Main {

	
	private static MazeSpace[][] mazeSpaces = new MazeSpace[0][0];
	
	/**
	 * Creates the maze
	 * (0 for blocked, 1 for able to walk through, 2 for start, and 3 for end)
	 * 
	 * Returns the maze 2d int array
	 */
		
	public static MazeSpace[][] CreateMaze() {
		int[][] maze = new int[][] {
				{0, 2, 0, 0}, 
				{0, 1, 0, 0},
				{0, 1, 0, 0}, 
				{0, 1, 3, 0}
			   };
	    mazeSpaces = new MazeSpace[maze.length][maze[0].length];
		for (int i = 0; i < maze.length; i++) {
			for (int j = 0; j < maze[0].length; j++) {
				mazeSpaces[i][j] = new MazeSpace(maze[i][j]);
			}
		}   		
		return mazeSpaces;
	}
	
	/**
	 * Finds start and end point
	 * 
	 * Returns xy in an array
	 */
	public static int[][] FindStartEndPoint(MazeSpace[][] maze){
		int[][] xy = {
				{0,0},
				{0,0}
				};
		for (int i = 0; i < maze.length; i++) {
			for (int j = 0; j < maze[0].length; j++) {
				if(maze[i][j].getStartSpace() == true) {
					 xy[0][0]= i;
					 xy[0][1]= j;
				}else if(maze[i][j].getEndSpace() == true) {
					 xy[1][0]= i;
					 xy[1][1]= j;
				}
			}
		}                      	
		return xy;
	}
	
	
	/**
	 * Returns 0 for left, 1 for right, 2 for up, and 3 for down
	 */
	public static int GetDirection(MazeSpace[][] maze) {
		int direction = 0;
		
		return direction;	
	}
	
	
	/**
	 * Solves the maze
	 * 
	 *  Returns the solved results (true for solved, false for not solved)
	 * 
	 */
	public static Boolean SolveMaze(MazeSpace[][] maze) {
		Boolean solved = false;
		int[][] startEndPoint = FindStartEndPoint(maze);
		int startX = startEndPoint[0][0];
		int startY = startEndPoint[0][1];
		int endX = startEndPoint[1][0];
		int endY = startEndPoint[1][1];
		
		return solved;	
	}
	
	
	/**
	 * 
	 */
	public Main() {
		//Create and solve the maze
		SolveMaze(CreateMaze());		
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Boolean results = SolveMaze(CreateMaze());		
	}

}
